# How to Use yabai
#
# basic
#   - https://qiita.com/psyashes/items/68ac40659ddbe04f8f7f
#   - https://github.com/koekeishiya/yabai/wiki
#
# logs
#   - log:       /usr/local/var/log/yabai/yabai.out.log
#   - error log: /usr/local/var/log/yabai/yabai.err.log
#
# setup
#
#   1. homebrewでyabaiとskhdをインスール
#   1. put `.yabairc` and `.skhdrc` on $HOME/
#   1. 環境設定 > Mission Control で「ディスプレイごとに個別の操作スペース」をONにする 
#     - これをしないとyabaiは使えず、エラーログに"yabai: 'display has separate spaces' is disabled! abort.." と出力される
#   1. yabaiとskhdを起動
#     - `$ brew services start koekeishiya/formulae/yabai`
#     - `$ brew services start skhd`
#     - 起動すると 環境設定 > セキュリティ > アクセシビリティでyabaiとskhdを許可するように促されるので許可する。
#   1. yabaiとskhdをMac起動時に自動で起動するように設定
#
# relaunch
#
# after modifing `.yabairc` or `.skhdrc`, restart yabai and skhd.
#   - restart yabai: `$ brew services restart koekeishiya/formulae/yabai`
#   - restart skhd:  `$ brew services restart skhd`

# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
# alt - h : yabai -m window --focus west # disable this. because use this for left arrow behavior

# swap managed window
# shift + alt - h : yabai -m window --swap north

# # move managed window
# shift + cmd - h : yabai -m window --warp east

# # balance size of windows
# shift + alt - 0 : yabai -m space --balance

# grid format: <rows>:<cols>:<start-x>:<start-y>:<width>:<height>
cmd + ctrl - k : yabai -m window --grid 2:1:0:0:1:0   # make floating window fill upper-half of screen
cmd + ctrl - j : yabai -m window --grid 2:1:0:2:1:0   # make floating window fill lower-half of screen
cmd + ctrl - h : yabai -m window --grid 1:2:0:0:1:1   # make floating window fill left-half of screen
cmd + ctrl - l : yabai -m window --grid 1:2:2:0:1:1   # make floating window fill right-half of screen
cmd + ctrl - i : yabai -m window --grid 1:1:0:0:1:1   # make floating window fill screen
cmd + ctrl - u : yabai -m window --grid 1:12:1:0:12:1 # make floating window fill right-half of screen, but create a space left side for slack sidebar

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
                  # index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                  # yabai -m window --space "${index}" && \
                  # yabai -m space --focus "${index}"

# # fast focus desktop
# cmd + alt - x : yabai -m display --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# # send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# # focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# # send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
alt - up    : yabai -m window --move rel:0:-30
alt - down  : yabai -m window --move rel:0:30
alt - left  : yabai -m window --move rel:-30:0
alt - right : yabai -m window --move rel:30:0

# increase window size
shift + alt - up    : yabai -m window --resize top:0:-30
shift + alt - right : yabai -m window --resize left:-30:0
# decrease window size
shift + alt - down  : yabai -m window --resize bottom:0:-30
shift + alt - left  : yabai -m window --resize left:30:0

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky;\
          # yabai -m window --toggle topmost;\
          # yabai -m window --toggle pip
